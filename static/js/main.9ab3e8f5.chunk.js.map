{"version":3,"sources":["components/Toolbar/NavigationItems/NavigationItem/NavigationItem.module.css","assets/images/c-logo.svg","components/Logo/Logo.module.css","components/Toolbar/NavigationItems/NavigationItems.module.css","components/Toolbar/Toolbar.module.css","components/Layout/Layout.module.css","hoc/Aux.js","components/Logo/Logo.js","components/Toolbar/NavigationItems/NavigationItem/NavigationItem.js","components/Toolbar/NavigationItems/NavigationItems.js","components/Toolbar/Toolbar.js","components/Layout/Layout.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","NavigationItem","active","__webpack_require__","p","Logo","NavigationItems","Toolbar","DesktopOnly","Content","aux","_ref","children","logo","props","react_default","a","createElement","className","classes","href","src","LogoImage","alt","navigationItem","link","navigationItems","toolbar","layout","Aux","App","Layout","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,eAAA,uCAAAC,OAAA,sDCDlBH,EAAAC,QAAiBG,EAAAC,EAAuB,oDCCxCL,EAAAC,QAAA,CAAkBK,KAAA,qCCAlBN,EAAAC,QAAA,CAAkBM,gBAAA,2DCAlBP,EAAAC,QAAA,CAAkBO,QAAA,yBAAAC,YAAA,+CCAlBT,EAAAC,QAAA,CAAkBS,QAAA,kOCCHC,EAFH,SAAAC,GAAA,OAAAA,EAAGC,0CCYAC,EARF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQd,MACtBU,EAAAC,EAAAC,cAAA,KAAGG,KAAK,KACNL,EAAAC,EAAAC,cAAA,OAAKI,IAAKC,IAAWC,IAAI,uCCIhBC,EARQ,SAAAV,GAAK,OAC1BC,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAQlB,gBACrBc,EAAAC,EAAAC,cAAA,KAAGG,KAAMN,EAAMW,KAAMP,UAAWJ,EAAMZ,OAASiB,IAAQjB,OAAS,MAC7DY,EAAMF,4BCUEc,EAZS,kBACtBX,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAQb,iBACrBS,EAAAC,EAAAC,cAAChB,EAAD,CAAgBwB,KAAK,IAAIvB,QAAM,GAA/B,QAGAa,EAAAC,EAAAC,cAAChB,EAAD,CAAgBwB,KAAK,YAArB,SACAV,EAAAC,EAAAC,cAAChB,EAAD,CAAgBwB,KAAK,cAArB,aACAV,EAAAC,EAAAC,cAAChB,EAAD,CAAgBwB,KAAK,SAArB,QACAV,EAAAC,EAAAC,cAAChB,EAAD,CAAgBwB,KAAK,eAArB,8BCIWE,EAVC,SAAAb,GAAK,OACnBC,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAQZ,SACzBQ,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACZ,EAAD,MACAU,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACX,EAAD,0BCCSsB,EAPA,SAAAjB,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbG,EAAAC,EAAAC,cAACY,EAAD,KACEd,EAAAC,EAAAC,cAACV,EAAD,MACAQ,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAQV,SAAUG,KCMxBkB,0LARX,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACc,EAAD,cAJUC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9ab3e8f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItem\":\"NavigationItem_NavigationItem__1CtyF\",\"active\":\"NavigationItem_active__2f0T-\"};","module.exports = __webpack_public_path__ + \"static/media/c-logo.f33e97bf.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Logo_Logo__1ucbE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItems\":\"NavigationItems_NavigationItems__1kebQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__35tmI\",\"DesktopOnly\":\"Toolbar_DesktopOnly__3BRKB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout_Content__1DYyD\"};","const aux = ({ children }) => children;\n\nexport default aux;\n","import React from \"react\";\nimport LogoImage from \"../../assets/images/c-logo.svg\";\nimport classes from \"./Logo.module.css\";\n\nconst logo = props => (\n  <div className={classes.Logo}>\n    <a href=\"/\">\n      <img src={LogoImage} alt=\"MyPortfolioLogo\" />\n    </a>\n  </div>\n);\n\nexport default logo;\n","import React from \"react\";\nimport classes from \"./NavigationItem.module.css\";\n\nconst navigationItem = props => (\n  <li className={classes.NavigationItem}>\n    <a href={props.link} className={props.active ? classes.active : null}>\n      {props.children}\n    </a>\n  </li>\n);\n\nexport default navigationItem;\n","import React from \"react\";\nimport NavigationItem from \"./NavigationItem/NavigationItem\";\nimport classes from \"./NavigationItems.module.css\";\n\nconst navigationItems = () => (\n  <ul className={classes.NavigationItems}>\n    <NavigationItem link=\"/\" active>\n      Home\n    </NavigationItem>\n    <NavigationItem link=\"/aboutus\">About</NavigationItem>\n    <NavigationItem link=\"/portfolio\">Portfolio</NavigationItem>\n    <NavigationItem link=\"/blog\">Blog</NavigationItem>\n    <NavigationItem link=\"/contact-us\">Contact</NavigationItem>\n  </ul>\n);\n\nexport default navigationItems;\n","import React from \"react\";\nimport Logo from \"../Logo/Logo\";\nimport NavigationItems from \"./NavigationItems/NavigationItems\";\n// import DrawerToggle from \"./SideDrawer/DrawerToggle/DrawerToggle\";\nimport classes from \"./Toolbar.module.css\";\n\nconst toolbar = props => (\n  <header className={classes.Toolbar}>\n    <div>Menu</div>\n    <Logo />\n    <nav>\n      <NavigationItems />\n    </nav>\n  </header>\n);\n\nexport default toolbar;\n","import React from \"react\";\nimport Aux from \"../../hoc/Aux\";\nimport Toolbar from \"../Toolbar/Toolbar\";\nimport classes from \"./Layout.module.css\";\n\nconst layout = ({ children }) => (\n  <Aux>\n    <Toolbar />\n    <main className={classes.Content}>{children}</main>\n  </Aux>\n);\n\nexport default layout;\n","import React, { Component } from \"react\";\nimport Layout from \"../components/Layout/Layout\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Layout />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}