{"version":3,"sources":["components/Header/Header.module.css","components/Header/NavigationItems/NavigationItem/NavigationItem.module.css","assets/images/c-logo.svg","components/Logo/Logo.module.css","components/Header/NavigationItems/NavigationItems.module.css","components/Header/SideDrawer/DrawerToggle/DrawerToggle.module.css","components/Logo/Logo.js","components/Header/NavigationItems/NavigationItem/NavigationItem.js","components/Header/NavigationItems/NavigationItems.js","components/Header/SideDrawer/DrawerToggle/DrawerToggle.js","components/Header/Header.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Logo","DesktopOnly","NavigationItem","active","__webpack_require__","p","NavigationItems","DrawerToggle","logo","props","react_default","a","createElement","className","classes","href","src","LogoImage","alt","navigationItem","_ref","link","children","navigationItems","drawerToggle","onClick","clicked","drawerToggleClicked","App","components_Header_Header","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,OAAA,uBAAAC,KAAA,qBAAAC,YAAA,8CCAlBJ,EAAAC,QAAA,CAAkBI,eAAA,uCAAAC,OAAA,sDCDlBN,EAAAC,QAAiBM,EAAAC,EAAuB,oDCCxCR,EAAAC,QAAA,CAAkBE,KAAA,qCCAlBH,EAAAC,QAAA,CAAkBQ,gBAAA,2DCAlBT,EAAAC,QAAA,CAAkBS,aAAA,4QCWHC,EARF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQd,MACtBU,EAAAC,EAAAC,cAAA,KAAGG,KAAK,KACNL,EAAAC,EAAAC,cAAA,OAAKI,IAAKC,IAAWC,IAAI,iCCIhBC,EARQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMlB,EAATiB,EAASjB,OAAQmB,EAAjBF,EAAiBE,SAAjB,OACrBZ,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAQZ,gBACrBQ,EAAAC,EAAAC,cAAA,KAAGG,KAAMM,EAAMR,UAAWV,EAASW,IAAQX,OAAS,MACjDmB,sBCUQC,EAZS,kBACtBb,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAQR,iBACrBI,EAAAC,EAAAC,cAACV,EAAD,CAAgBmB,KAAK,IAAIlB,QAAM,GAA/B,QAGAO,EAAAC,EAAAC,cAACV,EAAD,CAAgBmB,KAAK,YAArB,SACAX,EAAAC,EAAAC,cAACV,EAAD,CAAgBmB,KAAK,cAArB,aACAX,EAAAC,EAAAC,cAACV,EAAD,CAAgBmB,KAAK,SAArB,QACAX,EAAAC,EAAAC,cAACV,EAAD,CAAgBmB,KAAK,eAArB,8BCDWG,EARM,SAAAf,GAAK,OACxBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQP,aAAckB,QAAShB,EAAMiB,SACnDhB,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,8BCWWb,EAZA,SAAAU,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQf,QACtBW,EAAAC,EAAAC,cAACL,EAAD,CAAcmB,QAASjB,EAAMkB,sBAC7BjB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQd,MACtBU,EAAAC,EAAAC,cAACZ,EAAD,OAEFU,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQb,aACtBS,EAAAC,EAAAC,cAACN,EAAD,SCESsB,0LARX,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiB,EAAD,cAJUC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b6270d95.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3oQH1\",\"Logo\":\"Header_Logo__1Ki3b\",\"DesktopOnly\":\"Header_DesktopOnly__3Fm9E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItem\":\"NavigationItem_NavigationItem__2K4GH\",\"active\":\"NavigationItem_active__2ec3Z\"};","module.exports = __webpack_public_path__ + \"static/media/c-logo.f33e97bf.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Logo_Logo__1ucbE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItems\":\"NavigationItems_NavigationItems__3pflp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DrawerToggle\":\"DrawerToggle_DrawerToggle__3c-tM\"};","import React from \"react\";\nimport LogoImage from \"../../assets/images/c-logo.svg\";\nimport classes from \"./Logo.module.css\";\n\nconst logo = props => (\n  <div className={classes.Logo}>\n    <a href=\"/\">\n      <img src={LogoImage} alt=\"LogoImage\" />\n    </a>\n  </div>\n);\n\nexport default logo;\n","import React from \"react\";\nimport classes from \"./NavigationItem.module.css\";\n\nconst navigationItem = ({ link, active, children }) => (\n  <li className={classes.NavigationItem}>\n    <a href={link} className={active ? classes.active : null}>\n      {children}\n    </a>\n  </li>\n);\n\nexport default navigationItem;\n","import React from \"react\";\nimport NavigationItem from \"./NavigationItem/NavigationItem\";\nimport classes from \"./NavigationItems.module.css\";\n\nconst navigationItems = () => (\n  <ul className={classes.NavigationItems}>\n    <NavigationItem link=\"/\" active>\n      Home\n    </NavigationItem>\n    <NavigationItem link=\"/aboutus\">About</NavigationItem>\n    <NavigationItem link=\"/portfolio\">Portfolio</NavigationItem>\n    <NavigationItem link=\"/blog\">Blog</NavigationItem>\n    <NavigationItem link=\"/contact-us\">Contact</NavigationItem>\n  </ul>\n);\n\nexport default navigationItems;\n","import React from \"react\";\nimport classes from \"./DrawerToggle.module.css\";\n\nconst drawerToggle = props => (\n  <div className={classes.DrawerToggle} onClick={props.clicked}>\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default drawerToggle;\n","import React from \"react\";\nimport Logo from \"../Logo/Logo\";\nimport NavigationItems from \"./NavigationItems/NavigationItems\";\nimport DrawerToggle from \"./SideDrawer/DrawerToggle/DrawerToggle\";\nimport classes from \"./Header.module.css\";\n\nconst Header = props => (\n  <div className={classes.Header}>\n    <DrawerToggle clicked={props.drawerToggleClicked} />\n    <div className={classes.Logo}>\n      <Logo />\n    </div>\n    <nav className={classes.DesktopOnly}>\n      <NavigationItems />\n    </nav>\n  </div>\n);\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport Header from \"../components/Header/Header\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}